/*
 * Copyright 2012-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
	ext.kotlin_version = '1.3.20'
	repositories {
		mavenLocal()
		mavenCentral()
	}

	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
	}
}

plugins {
	id "org.jetbrains.kotlin.jvm" version "1.3.20"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'distribution'

group = componentGroup

// BUILD_NUMBER
// org.gradle.project.BUILD_NUMBER=systemPropertyValue
ext.env = System.getenv()
ext.buildNumber = (env.RELEASE_VERSION ?: componentVersion)
version = ext.buildNumber

targetCompatibility = componentJavaVersion
sourceCompatibility = componentJavaVersion
archivesBaseName = componentName

repositories {
	mavenLocal()
	mavenCentral()
}

configurations {
	provided
	providedCompile
}

sourceSets.main.compileClasspath += configurations.provided

dependencies {
	compile("com.google.code.gson:gson:${gsonVersion}")
	compile("commons-io:commons-io:${commonsIoVersion}")
	compile("org.apache.commons:commons-collections4:${commonsCollectionVersion}")
	compile("org.apache.commons:commons-lang3:${commonsLangVersion}")

	testCompile("junit:junit:${junitVersion}")
	testCompile("org.jetbrains.kotlin:kotlin-test")
	testCompile("org.jetbrains.kotlin:kotlin-test-junit")
}

jar {
	baseName = archivesBaseName
	manifest {
		attributes "Implementation-Title": archivesBaseName,
		           "Implementation-Version": version,
		           "Main-Class": componentMainClass
	}

	from {
		configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
	}
}

compileJava.dependsOn(processResources)

tasks.withType(JavaCompile) {
	options.fork = true
	options.incremental = true
	options.compilerArgs += ["-parameters"]
}

artifacts {
	archives jar
}

task distro {
	group "Build"
	description "build project clean room and update lib/ directory"
	mustRunAfter clean
	dependsOn build
}

distributions {
	main {
		contents {
			into('lib') {
				from jar
			}
			into('bin') {
				from 'bin'
			}
		}
	}
}

compileKotlin {
	kotlinOptions {
		jvmTarget = componentJavaVersion
		javaParameters = true
	}
}

compileTestKotlin {
	kotlinOptions {
		jvmTarget = componentJavaVersion
		javaParameters = true
	}
}
